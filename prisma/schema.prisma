generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id
    createdAt     DateTime      @default(now()) @map("created_at")
    updatedAt     DateTime      @default(now()) @map("updated_at")
    active        Boolean       @default(true)
    firstname     String
    lastname      String
    username      String
    email         String
    phoneNumber   String        @map("phone_number")
    birthDate     DateTime      @map("birth_date")
    sessions      Session[]
    customer      Customer?
    administrador Collaborator?
    gender        Gender
    genderId      String
}

model Address {
    id         String    @id
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime  @default(now()) @map("updated_at")
    active     Boolean   @default(true)
    zipCode    String
    nickname   String
    street     String
    district   String
    city       String
    state      String
    country    String
    Customer   Customer? @relation(fields: [customerId], references: [id])
    customerId String?
}

enum Gender {
    Male
    Female
    Trans
    Non_binary
}

model Session {
    id        String   @id
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    active    Boolean  @default(true)
    token     String   @unique
    expiredAt DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model Customer {
    id        String    @id
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @map("updated_at")
    active    Boolean   @default(true)
    user      User      @relation(fields: [userId], references: [id])
    userId    String    @unique
    address   Address[]
    orders    Order[]
    favs      Product[]
}

model Collaborator {
    id        String             @id
    createdAt DateTime           @default(now()) @map("created_at")
    updatedAt DateTime           @default(now()) @map("updated_at")
    active    Boolean            @default(true)
    user      User               @relation(fields: [userId], references: [id])
    roles     CollaboratorRole[]
    userId    String             @unique
}

model CollaboratorRole {
    id            String         @id
    createdAt     DateTime       @default(now()) @map("created_at")
    updatedAt     DateTime       @default(now()) @map("updated_at")
    active        Boolean        @default(true)
    content       String
    collaborators Collaborator[]
}

model Product {
    id              String           @id
    createdAt       DateTime         @default(now()) @map("created_at")
    updatedAt       DateTime         @default(now()) @map("updated_at")
    active          Boolean          @default(true)
    materials       Material[]
    prices          Int
    productsOrdered ProductOrdered[]
    customersFav    Customer[]
}

model Material {
    id        String    @id
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @default(now()) @map("updated_at")
    active    Boolean   @default(true)
    value     Int
    products  Product[]
}

model Order {
    id              String           @id
    createdAt       DateTime         @default(now()) @map("created_at")
    updatedAt       DateTime         @default(now()) @map("updated_at")
    active          Boolean          @default(true)
    value           Int
    status          OrderStatus
    customer        Customer         @relation(fields: [customerId], references: [id])
    customerId      String
    shipping        Shipping         @relation(fields: [shippingId], references: [id])
    shippingId      String
    productsOrdered ProductOrdered[]
}

enum OrderStatus {
    Pending
    Canceled_by_Client
    Canceled_by_Shop
    Approved
    Waiting_for_Shipping
    Out_for_delivery
    Waiting_for_withdrawal
    Delivered
    Finishing
}

model ProductOrdered {
    id        String   @id
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    active    Boolean  @default(true)
    quantity  Int
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
}

model Payment {
    id            String           @id
    createdAt     DateTime         @default(now()) @map("created_at")
    updatedAt     DateTime         @default(now()) @map("updated_at")
    active        Boolean          @default(true)
    contents      PaymentContent[]
    status        PaymentStatus
    type          PaymentType
    paymentTypeId String
}

model PaymentContent {
    id        String   @id
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @map("updated_at")
    active    Boolean  @default(true)
    content   String
    value     String
    payment   Payment  @relation(fields: [paymentId], references: [id])
    paymentId String
}

enum PaymentStatus {
    Pending
    Under_Analysis
    Approved
    Captured
    Canceled
    Denied
    Reversed
    Chargeback
}

enum PaymentType {
    Credit
    Debit
    Pix
}

model Shipping {
    id             String              @id
    createdAt      DateTime            @default(now()) @map("created_at")
    updatedAt      DateTime            @default(now()) @map("updated_at")
    active         Boolean             @default(true)
    shippingStatus ShippingSituation[]
    orders         Order[]
}

model ShippingSituation {
    id             String         @id
    createdAt      DateTime       @default(now()) @map("created_at")
    updatedAt      DateTime       @default(now()) @map("updated_at")
    active         Boolean        @default(true)
    date           DateTime       @default(now())
    shippingStatus ShippingStatus
    shipping       Shipping       @relation(fields: [shippingId], references: [id])
    shippingId     String
}

enum ShippingStatus {
    In_separation
    Packed_In_transit
    Delivered
    Delivery_failure
    Waiting_for_Shipping
    Out_for_delivery
    Waiting_for_withdrawal
    Returned_to_sender
}
